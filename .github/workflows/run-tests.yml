name: Run tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  vitest:
    name: Run tests
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest ]
        node: [ 21 ]

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Clone repository
        id: clone
        uses: actions/checkout@v4

      - name: Set pnpm version
        id: set-pnpm-version
        uses: pnpm/action-setup@v3
        with:
          version: ^8.15.0

      - name: Use Node.js ${{ matrix.node }}
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'

      - name: Get packages cache directory path
        id: package-cache-dir-path
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache rotation keys
        id: cache-rotation
        shell: bash
        run: |
          echo "YEAR_MONTH=$(/bin/date -u "+%Y%m")" >> $GITHUB_OUTPUT

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ matrix.os }}-node-v${{ matrix.node }}-pnpm-${{ steps.cache-rotation.outputs.YEAR_MONTH }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ matrix.os }}-node-v${{ matrix.node }}-pnpm-${{ steps.cache-rotation.outputs.YEAR_MONTH }}-
            ${{ matrix.os }}-node-v${{ matrix.node }}-pnpm-
            ${{ matrix.os }}-node-v${{ matrix.node }}-
            ${{ matrix.os }}-

      - name: Create env file
        id: create-env-file
        run: |
          touch .env
          echo AWS_REGION=$APP_AWS_REGION >> .env
          echo AWS_BUCKET=$APP_AWS_BUCKET >> .env
          echo WORD_LIST_FILE_NAME=$WORD_LIST_FILE_NAME >> .env
          cat .env
        env:
          APP_AWS_REGION: ${{ secrets.APP_AWS_REGION }}
          APP_AWS_BUCKET: ${{ secrets.APP_AWS_BUCKET }}
          WORD_LIST_FILE_NAME: ${{ secrets.WORD_LIST_FILE_NAME }}

      - name: Configure AWS Credentials
        id: configure-aws-credentials
        if: steps.create-env-file.outcome == 'success'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.APP_AWS_REGION }}
          mask-aws-account-id: "yes"

      - name: Install dependencies
        id: install-dependencies
        if: steps.configure-aws-credentials.outcome == 'success'
        run: pnpm install --frozen-lockfile --prefer-offline
        env:
          HUSKY: '0' # By default do not run HUSKY install

      - name: Test unit
        if: steps.install-dependencies.outcome == 'success'
        run: pnpm run test:unit --coverage --minWorkers=1 --maxWorkers=2

      - name: Test unit (Vue 3)
        if: steps.install-dependencies.outcome == 'success'
        run: pnpm run test:unit --coverage --minWorkers=1 --maxWorkers=2
        env:
          USE_VUE3: '1'

      - name: CodeCov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
          files: ./coverage-final.json
